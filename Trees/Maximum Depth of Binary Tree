104. Maximum Depth of Binary Tree

Given the root of a binary tree, return its maximum depth.

A binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: 3
Example 2:

Input: root = [1,null,2]
Output: 2
 

Constraints:

The number of nodes in the tree is in the range [0, 104].
-100 <= Node.val <= 100

program=(Recursive method)

class Solution {
    public int maxDepth(TreeNode root) {
        if(root==null)
        {
            return 0;
        }
        int lh=maxDepth(root.left);
        int rh=maxDepth(root.right);

        return 1+Math.max(lh,rh);
        
        
    }
}


program=(level order traversal)


class Solution {
    public int maxDepth(TreeNode root) {
        if(root==null)
        {
            return 0;
        }
        Queue<TreeNode>queue=new LinkedList<>();
        queue.add(root);
        int depth=0;
        while(!queue.isEmpty())
        {
             int levelsize=queue.size();
             for(int i=0;i<levelsize;i++)
             {
                TreeNode current=queue.poll();
                if(current.left!=null)
                {
                    queue.add(current.left);
                }
                if(current.right!=null)
                {
                    queue.add(current.right);
                }


             }
             depth++;
        

        }
        return depth;

       
    }
}



